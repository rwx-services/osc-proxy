#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'optparse'

require_relative '../lib/version'
require_relative '../lib/osc_proxy'
require_relative '../lib/osc_proxy/multi_proxy'

# Parse CLI options
options = {}
# rubocop:disable Metrics/BlockLength
OptionParser.new do |opts|
  opts.banner = 'Usage: osc-proxy [options]'

  opts.on('-d', '--database PATH', 'SQLite database path (multi-listener mode)') do |path|
    options[:database] = path
  end

  opts.on('-l', '--listener ID', 'Start only the specified listener ID (requires --database)') do |id|
    options[:listener_id] = id.to_i
  end

  opts.on('-c', '--config FILE', 'YAML configuration file (single-listener mode)') do |file|
    options[:config] = file
  end

  opts.on('--json', 'Output metrics as JSON') do
    options[:json] = true
  end

  opts.on('-v', '--version', 'Show version') do
    puts "osc-proxy version #{OSCProxy::VERSION}"
    exit
  end

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    puts
    puts 'Examples:'
    puts '  # Multi-listener mode (database):'
    puts '  osc-proxy --database ~/proxy.db'
    puts
    puts '  # Single-listener mode (YAML - legacy):'
    puts '  osc-proxy --config config/lightkey.yml'
    puts
    puts '  # JSON output for Electron integration:'
    puts '  osc-proxy --database ~/proxy.db --json'
    exit
  end
end.parse!
# rubocop:enable Metrics/BlockLength

begin
  # Determine which mode to use
  if options[:database]
    # Multi-listener mode
    raise "Database file not found: #{options[:database]}" unless File.exist?(options[:database])

    logger = OSCProxy::Logger.new(level: :normal, show_content: false)
    proxy = OSCProxy::MultiProxy.new(
      options[:database],
      logger: logger,
      json_mode: options[:json] || false,
      listener_id: options[:listener_id]
    )
    proxy.start

  elsif options[:config]
    # Single-listener mode (legacy YAML)
    config = OSCProxy::Config.from_file(options[:config])
    config = config.merge('logging' => { 'json_mode' => true }) if options[:json]
    proxy = OSCProxy::Proxy.new(config)
    proxy.start

  else
    # No options provided - show help
    puts 'Error: Either --database or --config must be specified'
    puts 'Run with --help for usage information'
    exit 1
  end
rescue StandardError => e
  warn "Error: #{e.message}"
  warn e.backtrace.join("\n") if ENV['DEBUG']
  exit 1
end
